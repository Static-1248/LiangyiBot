/**
 * Creep管理器 - 统一管理所有creep的生成、分配和监控
 */
import { SignalEmitter, signal } from '../SignalSystem';
import { memory } from '../MemoryManager';
import { globalConfig } from '../config/GlobalConfig';

export interface CreepAssignment {
    creepName: string;
    role: string;
    targetId?: Id<any>;
    priority: number;
    assignedTime: number;
    status: 'assigned' | 'working' | 'completed' | 'failed';
}

export interface CreepStatistics {
    totalCreeps: number;
    byRole: { [role: string]: number };
    byRoom: { [roomName: string]: number };
    efficiency: { [role: string]: number };
}

export class CreepManager extends SignalEmitter {
    private static instance: CreepManager;
    private assignments: Map<string, CreepAssignment> = new Map();
    private roleQueues: Map<string, string[]> = new Map(); // role -> creep names queue
    
    private constructor() {
        super();
        this.defineSignal('creep_manager.assignment_created');
        this.defineSignal('creep_manager.assignment_completed');
        this.defineSignal('creep_manager.assignment_failed');
        this.defineSignal('creep_manager.creep_idle');
        this.defineSignal('creep_manager.role_shortage');
        this.defineSignal('creep_manager.efficiency_report');
        
        this.autoConnectSignals();
    }

    public static getInstance(): CreepManager {
        if (!CreepManager.instance) {
            CreepManager.instance = new CreepManager();
        }
        return CreepManager.instance;
    }

    /**
     * 注册creep到管理器
     */
    public registerCreep(creepName: string, role: string): void {
        if (!this.roleQueues.has(role)) {
            this.roleQueues.set(role, []);
        }
        
        const queue = this.roleQueues.get(role)!;
        if (!queue.includes(creepName)) {
            queue.push(creepName);
            console.log(`📋 注册creep: ${creepName} (${role})`);
        }
    }

    /**
     * 移除creep（死亡时调用）
     */
    public unregisterCreep(creepName: string): void {
        // 从所有队列中移除
        for (const [role, queue] of this.roleQueues) {
            const index = queue.indexOf(creepName);
            if (index !== -1) {
                queue.splice(index, 1);
                console.log(`🗑️ 移除creep: ${creepName} (${role})`);
            }
        }
        
        // 移除任务分配
        this.assignments.delete(creepName);
    }

    /**
     * 分配任务给creep
     */
    public assignTask(
        creepName: string, 
        role: string, 
        targetId?: Id<any>, 
        priority: number = 1
    ): boolean {
        const creep = Game.creeps[creepName];
        if (!creep) return false;

        const assignment: CreepAssignment = {
            creepName,
            role,
            targetId,
            priority,
            assignedTime: Game.time,
            status: 'assigned'
        };

        this.assignments.set(creepName, assignment);
        
        this.emitSignal('creep_manager.assignment_created', {
            assignment,
            creep
        });

        console.log(`📋 分配任务: ${creepName} -> ${role}${targetId ? ` (目标: ${targetId})` : ''}`);
        return true;
    }

    /**
     * 获取指定角色的空闲creep
     */
    public getIdleCreep(role: string): Creep | null {
        const queue = this.roleQueues.get(role);
        if (!queue) return null;

        for (const creepName of queue) {
            const creep = Game.creeps[creepName];
            if (!creep) continue;

            const assignment = this.assignments.get(creepName);
            if (!assignment || assignment.status === 'completed') {
                return creep;
            }
        }

        return null;
    }

    /**
     * 获取角色数量
     */
    public getRoleCount(role: string): number {
        const queue = this.roleQueues.get(role);
        if (!queue) return 0;
        
        return queue.filter(name => Game.creeps[name]).length;
    }

    /**
     * 检查角色短缺
     */
    public checkRoleShortage(roomName: string): void {
        const roles = ['upgrader', 'builder', 'miner', 'hauler', 'supplier'];
        
        for (const role of roles) {
            const currentCount = this.getRoleCount(role);
            const targetCount = globalConfig.getRoomCreepLimit(roomName, role);
            
            if (currentCount < targetCount) {
                this.emitSignal('creep_manager.role_shortage', {
                    role,
                    currentCount,
                    targetCount,
                    roomName,
                    shortage: targetCount - currentCount
                });
            }
        }
    }

    /**
     * 获取统计信息
     */
    public getStatistics(): CreepStatistics {
        const stats: CreepStatistics = {
            totalCreeps: 0,
            byRole: {},
            byRoom: {},
            efficiency: {}
        };

        for (const creepName in Game.creeps) {
            const creep = Game.creeps[creepName];
            const role = memory.getCreepMemory(creepName).role || 'unknown';
            const roomName = creep.room.name;

            stats.totalCreeps++;
            stats.byRole[role] = (stats.byRole[role] || 0) + 1;
            stats.byRoom[roomName] = (stats.byRoom[roomName] || 0) + 1;
        }

        // 计算效率（简化版本）
        for (const role in stats.byRole) {
            const count = stats.byRole[role];
            const assignments = Array.from(this.assignments.values())
                .filter(a => a.role === role && a.status === 'working').length;
            stats.efficiency[role] = count > 0 ? (assignments / count) * 100 : 0;
        }

        return stats;
    }

    /**
     * 处理creep生成完成
     */
    @signal('creep.fully_spawned', 10)
    private onCreepSpawned(data: { creepName: string, role: string }): void {
        this.registerCreep(data.creepName, data.role);
    }

    /**
     * 处理creep死亡
     */
    @signal('creep.died', 10)
    private onCreepDied(data: { creep: Creep, role: string }): void {
        this.unregisterCreep(data.creep.name);
    }

    /**
     * 监听建造任务需求
     */
    @signal('building.construction_task_needed', 15)
    private onConstructionTaskNeeded(data: { target: ConstructionSite, priority: number }): void {
        const builder = this.getIdleCreep('builder');
        if (builder) {
            this.assignTask(builder.name, 'builder', data.target.id, data.priority);
        }
    }

    /**
     * 监听修理任务需求
     */
    @signal('building.repair_task_needed', 15)
    private onRepairTaskNeeded(data: { target: Structure, priority: number }): void {
        const builder = this.getIdleCreep('builder');
        if (builder) {
            this.assignTask(builder.name, 'repair', data.target.id, data.priority);
        }
    }

    /**
     * 监听搬运任务需求
     */
    @signal('hauler.task_needed', 15)
    private onHaulerTaskNeeded(data: { from: Structure, to: Structure, resourceType: ResourceConstant, priority: number }): void {
        const hauler = this.getIdleCreep('hauler');
        if (hauler) {
            this.assignTask(hauler.name, 'hauler', data.from.id, data.priority);
        }
    }

    /**
     * 运行管理器逻辑
     */
    public run(): void {
        // 清理无效的creep引用
        for (const [role, queue] of this.roleQueues) {
            const validCreeps = queue.filter(name => Game.creeps[name]);
            this.roleQueues.set(role, validCreeps);
        }

        // 检查角色短缺
        for (const roomName in Game.rooms) {
            const room = Game.rooms[roomName];
            if (room.controller && room.controller.my) {
                this.checkRoleShortage(roomName);
            }
        }

        // 效率报告
        if (Game.time % 100 === 0) {
            const stats = this.getStatistics();
            this.emitSignal('creep_manager.efficiency_report', { stats });
            
            console.log(`📊 Creep统计报告:`);
            console.log(`总数: ${stats.totalCreeps}`);
            console.log(`按角色: ${Object.entries(stats.byRole).map(([role, count]) => `${role}:${count}`).join(', ')}`);
            console.log(`效率: ${Object.entries(stats.efficiency).map(([role, eff]) => `${role}:${eff.toFixed(1)}%`).join(', ')}`);
        }
    }
}

// 全局实例
export const creepManager = CreepManager.getInstance(); 